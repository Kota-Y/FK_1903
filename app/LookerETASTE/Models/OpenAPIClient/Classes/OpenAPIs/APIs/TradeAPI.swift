//
// TradeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class TradeAPI {
    /**
     Create Trade.
     
     - parameter tradeCreate: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTrade(tradeCreate: TradeCreate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createTradeWithRequestBuilder(tradeCreate: tradeCreate).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Trade.
     - POST /trade
     - parameter tradeCreate: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createTradeWithRequestBuilder(tradeCreate: TradeCreate? = nil) -> RequestBuilder<Void> {
        let path = "/trade"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tradeCreate)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get Trade by ID.
     
     - parameter sneakerId: (path) Sneaker Id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTrade(sneakerId: Int64, completion: @escaping ((_ data: TradeHistroy?,_ error: Error?) -> Void)) {
        getTradeWithRequestBuilder(sneakerId: sneakerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Trade by ID.
     - GET /trade/{sneakerId}
     - parameter sneakerId: (path) Sneaker Id. 
     - returns: RequestBuilder<TradeHistroy> 
     */
    open class func getTradeWithRequestBuilder(sneakerId: Int64) -> RequestBuilder<TradeHistroy> {
        var path = "/trade/{sneakerId}"
        let sneakerIdPreEscape = "\(sneakerId)"
        let sneakerIdPostEscape = sneakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sneakerId}", with: sneakerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TradeHistroy>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get TradeSize by ID.
     
     - parameter sneakerId: (path) Sneaker Id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTradeSize(sneakerId: Int64, completion: @escaping ((_ data: TradeSize?,_ error: Error?) -> Void)) {
        getTradeSizeWithRequestBuilder(sneakerId: sneakerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get TradeSize by ID.
     - GET /trade/size/{sneakerId}
     - parameter sneakerId: (path) Sneaker Id. 
     - returns: RequestBuilder<TradeSize> 
     */
    open class func getTradeSizeWithRequestBuilder(sneakerId: Int64) -> RequestBuilder<TradeSize> {
        var path = "/trade/size/{sneakerId}"
        let sneakerIdPreEscape = "\(sneakerId)"
        let sneakerIdPostEscape = sneakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sneakerId}", with: sneakerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TradeSize>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
