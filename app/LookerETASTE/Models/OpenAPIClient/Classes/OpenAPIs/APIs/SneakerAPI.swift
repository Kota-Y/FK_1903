//
// SneakerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class SneakerAPI {
    /**
     Create Sneaker.
     
     - parameter sneaker: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSneaker(sneaker: Sneaker? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createSneakerWithRequestBuilder(sneaker: sneaker).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Sneaker.
     - POST /sneaker
     - parameter sneaker: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createSneakerWithRequestBuilder(sneaker: Sneaker? = nil) -> RequestBuilder<Void> {
        let path = "/sneaker"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sneaker)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete Sneaker by ID.
     
     - parameter sneakerId: (path) Sneaker Id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSneaker(sneakerId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteSneakerWithRequestBuilder(sneakerId: sneakerId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete Sneaker by ID.
     - DELETE /sneaker/{sneakerId}
     - parameter sneakerId: (path) Sneaker Id. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteSneakerWithRequestBuilder(sneakerId: Int64) -> RequestBuilder<Void> {
        var path = "/sneaker/{sneakerId}"
        let sneakerIdPreEscape = "\(sneakerId)"
        let sneakerIdPostEscape = sneakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sneakerId}", with: sneakerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Sneaker by ID.
     
     - parameter sneakerId: (path) Sneaker Id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getsSeaker(sneakerId: Int64, completion: @escaping ((_ data: Sneaker?,_ error: Error?) -> Void)) {
        getsSeakerWithRequestBuilder(sneakerId: sneakerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Sneaker by ID.
     - GET /sneaker/{sneakerId}
     - parameter sneakerId: (path) Sneaker Id. 
     - returns: RequestBuilder<Sneaker> 
     */
    open class func getsSeakerWithRequestBuilder(sneakerId: Int64) -> RequestBuilder<Sneaker> {
        var path = "/sneaker/{sneakerId}"
        let sneakerIdPreEscape = "\(sneakerId)"
        let sneakerIdPostEscape = sneakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sneakerId}", with: sneakerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Sneaker>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Sneakers.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getsSeakers(completion: @escaping ((_ data: SneakerAll?,_ error: Error?) -> Void)) {
        getsSeakersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Sneakers.
     - GET /sneaker
     - returns: RequestBuilder<SneakerAll> 
     */
    open class func getsSeakersWithRequestBuilder() -> RequestBuilder<SneakerAll> {
        let path = "/sneaker"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SneakerAll>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Sneakers.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getsSeakersHigtest(completion: @escaping ((_ data: SneakerRanking?,_ error: Error?) -> Void)) {
        getsSeakersHigtestWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Sneakers.
     - GET /sneaker/highest
     - returns: RequestBuilder<SneakerRanking> 
     */
    open class func getsSeakersHigtestWithRequestBuilder() -> RequestBuilder<SneakerRanking> {
        let path = "/sneaker/highest"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SneakerRanking>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Sneakers.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getsSeakersLowest(completion: @escaping ((_ data: SneakerRanking?,_ error: Error?) -> Void)) {
        getsSeakersLowestWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Sneakers.
     - GET /sneaker/lowest
     - returns: RequestBuilder<SneakerRanking> 
     */
    open class func getsSeakersLowestWithRequestBuilder() -> RequestBuilder<SneakerRanking> {
        let path = "/sneaker/lowest"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SneakerRanking>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Sneakers.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getsSeakersPopular(completion: @escaping ((_ data: SneakerRanking?,_ error: Error?) -> Void)) {
        getsSeakersPopularWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Sneakers.
     - GET /sneaker/popular
     - returns: RequestBuilder<SneakerRanking> 
     */
    open class func getsSeakersPopularWithRequestBuilder() -> RequestBuilder<SneakerRanking> {
        let path = "/sneaker/popular"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SneakerRanking>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
