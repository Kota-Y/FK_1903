//
// BidAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class BidAPI {
    /**
     Create Bid.
     
     - parameter modelError: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createBid(modelError: ModelError? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createBidWithRequestBuilder(modelError: modelError).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Bid.
     - POST /bid[WIP]
     - parameter modelError: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createBidWithRequestBuilder(modelError: ModelError? = nil) -> RequestBuilder<Void> {
        let path = "/bid[WIP]"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modelError)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete Bid by ID.
     
     - parameter bidId: (path) Bid Id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteBid(bidId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteBidWithRequestBuilder(bidId: bidId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete Bid by ID.
     - DELETE /bid/{bidId}
     - parameter bidId: (path) Bid Id. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteBidWithRequestBuilder(bidId: Int64) -> RequestBuilder<Void> {
        var path = "/bid/{bidId}"
        let bidIdPreEscape = "\(bidId)"
        let bidIdPostEscape = bidIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bidId}", with: bidIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Bid by ID.
     
     - parameter sneakerId: (path) Sneaker Id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBid(sneakerId: Int64, completion: @escaping ((_ data: ModelError?,_ error: Error?) -> Void)) {
        getBidWithRequestBuilder(sneakerId: sneakerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Bid by ID.
     - GET /bid/{sneakerId}[WIP]
     - parameter sneakerId: (path) Sneaker Id. 
     - returns: RequestBuilder<ModelError> 
     */
    open class func getBidWithRequestBuilder(sneakerId: Int64) -> RequestBuilder<ModelError> {
        var path = "/bid/{sneakerId}[WIP]"
        let sneakerIdPreEscape = "\(sneakerId)"
        let sneakerIdPostEscape = sneakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sneakerId}", with: sneakerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelError>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
